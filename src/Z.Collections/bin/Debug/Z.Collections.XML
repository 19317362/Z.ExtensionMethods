<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Z.Collections</name>
    </assembly>
    <members>
        <member name="M:Extensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                An ICollection&lt;T&gt; extension method that adds only if the value satisfies the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="value">The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                An ICollection&lt;T&gt; extension method that add value if the ICollection doesn't contains it already.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that adds a range to 'values'.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.AddRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that adds a collection of objects to the end of this collection only
                for value who satisfies the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that adds a range of values that's not already in the ICollection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that query if '@this' contains all values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that query if '@this' contains any value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that query if the collection is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if empty&lt; t&gt;, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that query if the collection is not empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if not empty&lt; t&gt;, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that queries if the collection is not (null or is empty).
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if the collection is not (null or empty), false if not.</returns>
        </member>
        <member name="M:Extensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that queries if the collection is null or is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if null or empty&lt; t&gt;, false if not.</returns>
        </member>
        <member name="M:Extensions.RemoveIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
                An ICollection&lt;T&gt; extension method that removes if.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.RemoveIfContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                An ICollection&lt;T&gt; extension method that removes if contains.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Extensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that removes the range.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.RemoveRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that removes range item that satisfy the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.RemoveRangeIfContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that removes the range if contains.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
                An ICollection&lt;T&gt; extension method that removes value that satisfy the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.ToExpando(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                An IDictionary&lt;string,object&gt; extension method that converts the @this to an expando.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ExpandoObject.</returns>
        </member>
        <member name="M:Extensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                An IDictionary&lt;string,string&gt; extension method that converts the @this to a name value collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a NameValueCollection.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="value">The value to be added or updated.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:Extensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's
                existing value.
            </param>
            <returns>
                The new value for the key. This will be either be addValue (if the key was absent) or the result of
                updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Extensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's
                existing value.
            </param>
            <returns>
                The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or
                the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Extensions.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that query if '@this' contains all key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="keys">A variable-length parameters list containing keys.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that query if '@this' contains any key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="keys">A variable-length parameters list containing keys.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does not already exist.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>
                The value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Adds a key/value pair to the IDictionary&lt;TKey, TValue&gt; by using the specified function, if the key does
                not already exist.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">TThe function used to generate a value for the key.</param>
            <returns>
                The value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extensions.RemoveIfContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that removes if contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Extensions.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that converts the @this to a sorted dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a SortedDictionary&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="M:Extensions.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that converts the @this to a sorted dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="comparer">The comparer.</param>
            <returns>@this as a SortedDictionary&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="M:Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                An IEnumerable&lt;T&gt; extension method that query if '@this' contains all.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                An IEnumerable&lt;T&gt; extension method that query if '@this' contains any.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Enumerates for each in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>An enumerator that allows foreach to be used to process for each in this collection.</returns>
        </member>
        <member name="M:Extensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that query if 'collection' is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that queries if a not is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if a not is t>, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that queries if a not null or is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if a not null or is t>, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that queries if a null or is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if a null or is t>, false if not.</returns>
        </member>
        <member name="M:Extensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Concatenates all the elements of a IEnumerable, using the specified separator between each element.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">An IEnumerable that contains the elements to concatenate.</param>
            <param name="separator">
                The string to use as a separator. separator is included in the returned string only if
                value has more than one element.
            </param>
            <returns>
                A string that consists of the elements in value delimited by the separator string. If value is an empty array,
                the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
                Concatenates all the elements of a IEnumerable, using the specified separator between
                each element.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="separator">
                The string to use as a separator. separator is included in the
                returned string only if value has more than one element.
            </param>
            <returns>
                A string that consists of the elements in value delimited by the separator string. If
                value is an empty array, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extensions.ToHashtable(System.Collections.IDictionary)">
            <summary>
                An IDictionary extension method that converts the @this to a hashtable.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a Hashtable.</returns>
        </member>
        <member name="M:Extensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
                A NameValueCollection extension method that converts the @this to a dictionary.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an IDictionary&lt;string,object&gt;</returns>
        </member>
    </members>
</doc>
